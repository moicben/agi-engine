// Complete implementation for MCP launcher
import { Stagehand } from '@browserbasehq/stagehand';
import { launchBrowserBase } from './launchBrowserBase.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * D√©marre une session MCP avec Stagehand pour l'automatisation guid√©e
 * @param {Object} options - Options de configuration
 * @returns {Promise<Object>} - Session avec stagehand, browser et page
 */
export async function startMCPSession(options = {}) {
  console.log('üöÄ D√©marrage de la session MCP...');
  
  try {
    const { browser, page, sessionId } = await launchBrowserBase(options);

    const stagehand = new Stagehand({
      browser,
      page,
      modelName: 'google/gemini-2.0-flash',
              modelApiKey: process.env.GOOGLE_GENERATIVE_AI_API_KEY
    });

    // Initialiser Stagehand
    await stagehand.init();

    console.log('‚úÖ Session MCP pr√™te pour instructions guid√©es');
    console.log('üÜî Session Browserbase:', sessionId);
    
    return { stagehand, browser, page, sessionId };
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage de la session MCP:', error.message);
    throw error;
  }
}

/**
 * Termine une session MCP et sauvegarde le code g√©n√©r√©
 * @param {Object} stagehand - Instance Stagehand
 * @param {string} generatedCode - Code JavaScript g√©n√©r√©
 * @param {string} workflowName - Nom du workflow (optionnel)
 * @returns {Promise<string>} - Chemin du fichier sauvegard√©
 */
export async function endMCPSession(stagehand, generatedCode, workflowName = null) {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0] + '-' + Date.now();
    const fileName = workflowName ? `${workflowName}-${timestamp}.js` : `workflow-${timestamp}.js`;
    const workflowPath = path.join(__dirname, '../../workflows/generated/', fileName);
    
    // Ajouter des m√©tadonn√©es au code g√©n√©r√©
    const codeWithMetadata = `// Workflow g√©n√©r√© automatiquement via MCP + Stagehand
// Date: ${new Date().toISOString()}
// Nom: ${workflowName || 'Workflow sans nom'}

${generatedCode}`;
    
    fs.writeFileSync(workflowPath, codeWithMetadata);
    console.log(`‚úÖ Code sauvegard√© dans ${workflowPath}`);
    
    await stagehand.close();
    console.log('üîå Session MCP ferm√©e');
    
    return workflowPath;
  } catch (error) {
    console.error('‚ùå Erreur lors de la fermeture de session:', error.message);
    throw error;
  }
}

/**
 * Exemple d'utilisation du MCP pour cr√©er un workflow
 * @param {string} instructions - Instructions en langage naturel
 * @returns {Promise<void>}
 */
export async function createWorkflowFromInstructions(instructions, workflowName = 'test-workflow') {
  console.log('üìù Cr√©ation de workflow √† partir des instructions:', instructions);
  
  const { stagehand } = await startMCPSession();
  
  try {
    // Ex√©cuter les instructions
    await stagehand.act(instructions);
    
    // G√©n√©rer le code √©quivalent (exemple basique)
    const generatedCode = `// Workflow g√©n√©r√© √† partir de: ${instructions}
export async function ${workflowName.replace(/-/g, '_')}() {
  // TODO: Impl√©menter la logique bas√©e sur les instructions
  console.log('Ex√©cution du workflow: ${workflowName}');
  
  // Code √† compl√©ter selon les actions effectu√©es
  return { success: true };
}`;
    
    const savedPath = await endMCPSession(stagehand, generatedCode, workflowName);
    console.log('‚úÖ Workflow cr√©√© et sauvegard√©:', savedPath);
    
    return savedPath;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du workflow:', error.message);
    await stagehand.close();
    throw error;
  }
}

/**
 * Fonction de test pour v√©rifier que tout fonctionne
 * @returns {Promise<void>}
 */
export async function testMCPSetup() {
  console.log('üß™ Test de la configuration MCP...');
  
  try {
    const { stagehand, sessionId } = await startMCPSession();
    
    // Debug: voir les m√©thodes disponibles apr√®s init
    console.log('üîç M√©thodes Stagehand disponibles:', Object.getOwnPropertyNames(stagehand));
    console.log('üîç Type de agent:', typeof stagehand.agent);
    
    // Test simple: aller sur Google en utilisant la page directement
    await stagehand.page.goto('https://www.google.com', { waitUntil: 'networkidle' });
    console.log('‚úÖ Navigation vers Google r√©ussie');
    
    // Tester l'agent IA pour une action simple
    console.log('ü§ñ Test de l\'agent IA...');
    try {
      // L'agent est une fonction - testons
      const agentResult = await stagehand.agent('Take a screenshot of the current page');
      console.log('‚úÖ Agent IA ex√©cut√©:', agentResult);
    } catch (agentError) {
      console.log('‚ö†Ô∏è Agent non disponible:', agentError.message);
      // Prendre un screenshot classique en fallback
      await stagehand.page.screenshot({ path: 'screenshots/test-mcp.png', fullPage: true });
      console.log('‚úÖ Screenshot classique pris');
    }
    
    console.log('‚úÖ Test MCP r√©ussi!');
    
    // G√©n√©rer un code de test
    const testCode = `// Test workflow g√©n√©r√© automatiquement
export async function testWorkflow() {
  console.log('Test workflow ex√©cut√© avec succ√®s!');
  return { success: true, timestamp: new Date().toISOString() };
}`;
    
    await endMCPSession(stagehand, testCode, 'test-setup');
    
  } catch (error) {
    console.error('‚ùå Test MCP √©chou√©:', error.message);
    throw error;
  }
}

// Si ce fichier est ex√©cut√© directement, lancer le test
if (import.meta.url === `file://${process.argv[1]}`) {
  testMCPSetup().catch(console.error);
}
