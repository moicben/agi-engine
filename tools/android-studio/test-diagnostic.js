#!/usr/bin/env node

/**
 * Diagnostic complet Android Studio
 * V√©rification de l'environnement et des pr√©requis
 */

import { AndroidStudioService } from './index.js';
import { sleep } from '../../whatsapp/helpers.js';

async function fullDiagnostic() {
  console.log('üîç DIAGNOSTIC COMPLET ANDROID STUDIO');
  console.log('=====================================\n');

  const results = {
    system: {},
    androidStudio: {},
    androidSdk: {},
    adb: {},
    emulator: {},
    nordvpn: {},
    recommendations: []
  };

  try {
    // 1. Diagnostic syst√®me
    console.log('1Ô∏è‚É£ üìä Analyse du syst√®me...\n');
    const service = new AndroidStudioService();

    // Initialiser juste le gestionnaire de plateforme
    const platform = service.platform;
    const platformInfo = await platform.detectPlatform();

    results.system = {
      platform: platformInfo.name,
      os: platformInfo.os,
      arch: platformInfo.arch,
      release: platformInfo.release,
      distro: platformInfo.distro,
      memory: platformInfo.memory,
      cpu: platformInfo.cpu
    };

    console.log(`   üñ•Ô∏è Plateforme: ${platformInfo.name} (${platformInfo.os})`);
    console.log(`   üèóÔ∏è Architecture: ${platformInfo.arch}`);
    if (platformInfo.distro) console.log(`   üêß Distribution: ${platformInfo.distro}`);
    console.log(`   üíæ M√©moire: ${platformInfo.memory.total}MB total, ${platformInfo.memory.free}MB libre`);
    console.log(`   ‚ö° CPU: ${platformInfo.cpu.cores} c≈ìurs, ${platformInfo.cpu.model}`);
    console.log('   ‚úÖ Analyse syst√®me termin√©e\n');

    // 2. V√©rifier les pr√©requis syst√®me
    console.log('2Ô∏è‚É£ üîß V√©rification des pr√©requis...\n');
    const systemCheck = await platform.checkSystemRequirements();
    results.system.compatible = systemCheck.compatible;
    results.system.issues = systemCheck.issues;

    if (systemCheck.compatible) {
      console.log('   ‚úÖ Pr√©requis syst√®me OK');
    } else {
      console.log('   ‚ö†Ô∏è Probl√®mes d√©tect√©s:');
      systemCheck.issues.forEach((issue, i) => {
        console.log(`      ${i + 1}. ${issue}`);
      });
    }
    console.log('   ‚úÖ V√©rification pr√©requis termin√©e\n');

    // 3. Rechercher Android Studio
    console.log('3Ô∏è‚É£ üìù Recherche Android Studio...\n');
    const studioPath = await platform.findAndroidStudio();
    results.androidStudio.found = !!studioPath;
    results.androidStudio.path = studioPath;

    if (studioPath) {
      console.log('   ‚úÖ Android Studio trouv√©');
      console.log(`   üìç Chemin: ${studioPath}`);
    } else {
      console.log('   ‚ùå Android Studio non trouv√©');
      results.recommendations.push('Installer Android Studio depuis https://developer.android.com/studio');
    }
    console.log('   ‚úÖ Recherche Android Studio termin√©e\n');

    // 4. V√©rifier Android SDK
    console.log('4Ô∏è‚É£ üîß V√©rification Android SDK...\n');
    try {
      await service.initialize();
      results.androidSdk.found = true;
      results.androidSdk.path = service.sdk.sdkPath;
      results.androidSdk.version = service.sdk.sdkVersion;

      console.log('   ‚úÖ Android SDK trouv√©');
      console.log(`   üìç Chemin: ${service.sdk.sdkPath}`);
      if (service.sdk.sdkVersion) {
        console.log(`   üì¶ Version: ${service.sdk.sdkVersion}`);
      }

      // V√©rifier les outils
      const health = await service.sdk.checkHealth();
      console.log(`   üîß Outils SDK: ${health.healthy ? 'OK' : 'ISSUES'}`);

      if (health.issues.length > 0) {
        console.log('   ‚ö†Ô∏è Probl√®mes outils:');
        health.issues.forEach(issue => console.log(`      ‚Ä¢ ${issue}`));
      }

    } catch (error) {
      results.androidSdk.found = false;
      results.androidSdk.error = error.message;
      console.log('   ‚ùå Android SDK non trouv√©');
      console.log(`   üî¥ Erreur: ${error.message}`);
      results.recommendations.push('Installer Android SDK ou d√©finir ANDROID_HOME');
    }
    console.log('   ‚úÖ V√©rification SDK termin√©e\n');

    // 5. V√©rifier ADB
    console.log('5Ô∏è‚É£ üì± Test ADB...\n');
    try {
      const { stdout } = await service.executeCommand('adb version');
      const versionMatch = stdout.match(/version ([\d\.]+)/);
      const version = versionMatch ? versionMatch[1] : 'inconnue';

      results.adb.found = true;
      results.adb.version = version;
      console.log('   ‚úÖ ADB trouv√©');
      console.log(`   üì¶ Version: ${version}`);

      // Lister les devices
      const { stdout: devicesOutput } = await service.executeCommand('adb devices');
      const deviceLines = devicesOutput.split('\n').filter(line => line.includes('device') && !line.includes('List'));
      console.log(`   üì± Devices connect√©s: ${deviceLines.length}`);

    } catch (error) {
      results.adb.found = false;
      results.adb.error = error.message;
      console.log('   ‚ùå ADB non trouv√©');
      console.log(`   üî¥ Erreur: ${error.message}`);
      results.recommendations.push('Installer Android SDK Platform Tools');
    }
    console.log('   ‚úÖ Test ADB termin√©\n');

    // 6. V√©rifier les √©mulateurs
    console.log('6Ô∏è‚É£ üéÆ Test des √©mulateurs...\n');
    try {
      const { stdout } = await service.executeCommand('emulator -list-avds');
      const avds = stdout.trim().split('\n').filter(name => name.trim());

      results.emulator.found = avds.length > 0;
      results.emulator.count = avds.length;
      results.emulator.list = avds;

      if (avds.length > 0) {
        console.log(`   ‚úÖ √âmulateurs trouv√©s: ${avds.length}`);
        avds.forEach((avd, i) => {
          console.log(`      ${i + 1}. ${avd}`);
        });
      } else {
        console.log('   ‚ö†Ô∏è Aucun √©mulateur trouv√©');
        results.recommendations.push('Cr√©er un √©mulateur via Android Studio ou avdmanager');
      }

    } catch (error) {
      results.emulator.found = false;
      results.emulator.error = error.message;
      console.log('   ‚ùå √âmulateurs non accessibles');
      console.log(`   üî¥ Erreur: ${error.message}`);
    }
    console.log('   ‚úÖ Test √©mulateurs termin√©\n');

    // 7. V√©rifier NordVPN (optionnel)
    console.log('7Ô∏è‚É£ üåç Test NordVPN...\n');
    try {
      const { nordVPNService } = await import('../nordvpn/index.js');
      results.nordvpn.found = true;
      console.log('   ‚úÖ NordVPN disponible');

      // V√©rifier si install√©
      try {
        await nordVPNService.checkInstallation();
        console.log('   ‚úÖ NordVPN install√©');
      } catch (error) {
        console.log('   ‚ö†Ô∏è NordVPN install√© mais non accessible');
        console.log(`   üí° Erreur: ${error.message}`);
      }

    } catch (error) {
      results.nordvpn.found = false;
      console.log('   ‚ö†Ô∏è NordVPN non disponible (normal)');
      console.log(`   üí° Pour l'utiliser: ${error.message}`);
    }
    console.log('   ‚úÖ Test NordVPN termin√©\n');

    // 8. Nettoyer
    await service.cleanup();

  } catch (error) {
    console.error('\n‚ùå ERREUR FATALE LORS DU DIAGNOSTIC:');
    console.error(error.message);
    return;
  }

  // Rapport final
  console.log('üìã RAPPORT DE DIAGNOSTIC');
  console.log('========================\n');

  // √âtat g√©n√©ral
  const allGood = results.androidStudio.found && results.androidSdk.found && results.adb.found;
  console.log(`üéØ √âtat g√©n√©ral: ${allGood ? '‚úÖ PR√äT' : '‚ö†Ô∏è CONFIGURATION REQUISE'}\n`);

  // D√©tails par composant
  console.log('üìä D√©tails par composant:');
  console.log(`   ‚Ä¢ Syst√®me: ${results.system.compatible ? '‚úÖ' : '‚ùå'} (${results.system.platform})`);
  console.log(`   ‚Ä¢ Android Studio: ${results.androidStudio.found ? '‚úÖ' : '‚ùå'} ${results.androidStudio.found ? 'Trouv√©' : 'Non trouv√©'}`);
  console.log(`   ‚Ä¢ Android SDK: ${results.androidSdk.found ? '‚úÖ' : '‚ùå'} ${results.androidSdk.found ? 'Trouv√©' : 'Non trouv√©'}`);
  console.log(`   ‚Ä¢ ADB: ${results.adb.found ? '‚úÖ' : '‚ùå'} ${results.adb.found ? `v${results.adb.version}` : 'Non trouv√©'}`);
  console.log(`   ‚Ä¢ √âmulateurs: ${results.emulator.found ? '‚úÖ' : '‚ùå'} ${results.emulator.count || 0} trouv√©(s)`);
  console.log(`   ‚Ä¢ NordVPN: ${results.nordvpn.found ? '‚úÖ' : '‚ö†Ô∏è'} ${results.nordvpn.found ? 'Disponible' : 'Non disponible'}`);
  console.log('');

  // Recommandations
  if (results.recommendations.length > 0) {
    console.log('üí° Recommandations:');
    results.recommendations.forEach((rec, i) => {
      console.log(`   ${i + 1}. ${rec}`);
    });
    console.log('');
  }

  // Instructions d'installation
  if (!results.androidStudio.found) {
    console.log('üõ†Ô∏è Instructions d\'installation Android Studio:');
    console.log('   1. T√©l√©charger: https://developer.android.com/studio');
    console.log('   2. Installer Android SDK lors de la premi√®re ouverture');
    console.log('   3. Cr√©er un √©mulateur via AVD Manager');
    console.log('');
  }

  // Variables d'environnement
  console.log('üîß Variables d\'environnement recommand√©es:');
  if (results.androidSdk.path) {
    console.log(`   export ANDROID_HOME="${results.androidSdk.path}"`);
    console.log(`   export PATH="$PATH:${results.androidSdk.path}/platform-tools:${results.androidSdk.path}/tools"`);
  }
  console.log('   export ANDROID_AVD_HOME="$HOME/.android/avd"');
  console.log('');

  // Test rapide
  console.log('üöÄ Commandes de test:');
  console.log('   node tools/android-studio/test-quick.js');
  console.log('   node tools/android-studio/example-whatsapp-nordvpn.js');
  console.log('');

  console.log('üéâ Diagnostic termin√© !');

  return results;
}

// Lancer le diagnostic si ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  fullDiagnostic().catch(console.error);
}

export { fullDiagnostic };
