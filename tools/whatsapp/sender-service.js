/* Service d'envoi de messages
    sur l'application WhatsApp        
*/

// Importer le service de WhatsApp (si n√©cessaire)
// import { whatsappService } from './app-service.js';
import { tap, press, sleep, randomSleep } from './helpers.js';
import { executeCommand, takeScreenshot } from './adb.js';
import { ocrService } from './ocr-service.js';
import { deviceService } from './device-service.js';

const UI_ELEMENTS = {
    searhInput: { x: 540, y: 205 },
    messageInput: { x: 540, y: 1840 },
    imageInput: { x: 820, y: 1840 },
    galleryMode: { x: 270, y: 1450 },
    firstImage: { x: 120, y: 1200 },
    sendButton: { x: 1020, y: 1808 },
    returnButton: { x: 30, y: 100 },
    preventNotWhatsApp: { x: 825, y: 1040 },
    preventDisapear: { x: 550, y: 1650 }
}

// Nettoyer le num√©ro du contact pour utilisation wa.me/
async function phoneWaCleaner(phone) {
    // Nettoyer le d√©but du num√©ro du contact (pas le reste)
    let phoneNumber = phone.replace('+', '').replace(/ /g, '');
    if (phoneNumber.startsWith('06')) {
        phoneNumber = '336' + phoneNumber.slice(2);
    } else if (phoneNumber.startsWith('07')) {
        phoneNumber = '337' + phoneNumber.slice(2);
    }
    else if (phoneNumber.startsWith('0044')) {
        phoneNumber = '44' + phoneNumber.slice(4);
    }
    return phoneNumber;
}

// S√©lectionner une version al√©atoire du message
function selectRandomMessage(message) {
    // Si c'est un string simple, le retourner
    if (typeof message === 'string') {
        return message;
    }
    
    // Si c'est un objet avec plusieurs versions
    if (typeof message === 'object') {
        const versions = Object.values(message);
        if (versions.length === 1) {
            return versions[0];
        }
        // S√©lection al√©atoire
        const randomIndex = Math.floor(Math.random() * versions.length);
        return versions[randomIndex];
    }
    
    return message;
}

// Envoyer un message √† un num√©ro WhatsApp
async function sendMessage(device, phone, message, campaign_id) {

    // Initialiser le statut du contact
    let contactedState = 'in_progress';

    // S√©lectionner la version du message √† envoyer
    const selectedMessage = selectRandomMessage(message);

    // Nettoyer le num√©ro du contact
    const phoneNumber = await phoneWaCleaner(phone);

    //


    // Connexion au device
    await deviceService.connectDevice(device);

    // Ouvrir le num√©ro dans WhatsApp
    await executeCommand(device, `shell am start -a android.intent.action.VIEW -d "https://wa.me/${phoneNumber}"`);    
    await sleep(2000);

    // V√©rifier si num√©ro enregistr√© avec OCR
    //console.log('üì∏ Capture de l\'√©cran de profil...');
    const screenshotFilename = `send-${Date.now()}.png`;
    const screenshotPath = await takeScreenshot(device, screenshotFilename);
    // Polling rapide jusqu'√† 6s, 500ms interval, quitte t√¥t si verdict
    const phoneExists = await ocrService.isPhoneWhatsApp(screenshotPath, { device, maxMs: 6000, interval: 500 });
    //console.log('phoneExists', phoneExists);

    // Envoyer ou non le message
    if (phoneExists) {

        // Fermer la popup de notifications messages √©ph√©m√®res
        await tap(device, UI_ELEMENTS.preventDisapear);
        await randomSleep(1500, 2500);

        // Envoyer le message
        await tap(device, UI_ELEMENTS.messageInput);
        await randomSleep(1000, 2000);
        // Traiter les retours √† la ligne multiples
        const messageParts = selectedMessage
            .replace(/\n{2,}/g, '\n\n')  // Remplacer 3+ \n par seulement 2
            .split('\n')
            .map(part => part.trim());
            
        for (let i = 0; i < messageParts.length; i++) {
            // Diviser les longs messages en chunks de 100 caract√®res
            const messagePart = messageParts[i];
            const maxChunkSize = 100;
            
            for (let j = 0; j < messagePart.length; j += maxChunkSize) {
                const chunk = messagePart.substring(j, j + maxChunkSize);
                
                // Nettoyer et √©chapper le texte de mani√®re plus robuste
                const cleanChunk = chunk
                    .replace(/[√†√°√¢√£√§√•]/g, 'a')
                    .replace(/[√®√©√™√´]/g, 'e')
                    .replace(/[√¨√≠√Æ√Ø]/g, 'i')
                    .replace(/[√≤√≥√¥√µ√∂]/g, 'o')
                    .replace(/[√π√∫√ª√º]/g, 'u')
                    .replace(/[√ß]/g, 'c')
                    .replace(/[√±]/g, 'n')
                    .replace(/[√¶]/g, 'ae')
                    .replace(/[≈ì]/g, 'oe')
                    .replace(/[√Ä-√ø]/g, ''); // Supprimer les autres caract√®res sp√©ciaux
                
                // √âchapper pour le shell de mani√®re plus robuste
                const formattedChunk = cleanChunk
                    .replace(/\\/g, '\\\\')    // √âchapper les backslashes
                    .replace(/"/g, '\\"')      // √âchapper les guillemets
                    .replace(/'/g, "\\'")      // √âchapper les apostrophes
                    .replace(/\(/g, '\\(')     // √âchapper les parenth√®ses ouvrantes
                    .replace(/\)/g, '\\)')     // √âchapper les parenth√®ses fermantes
                    .replace(/ /g, '\\ ');     // √âchapper les espaces
                
                // √âcrire le chunk du message
                if (formattedChunk.trim().length > 0) {
                    await executeCommand(device, `shell input text "${formattedChunk}"`);
                }
            }
            
            // Ajouter retour √† la ligne sauf pour la derni√®re partie
            if (i < messageParts.length - 1) {
                await executeCommand(device, `shell input keyevent 66`); // ENTER
            }

            // D√©lai entre chaque partie du message
            await randomSleep(200, 500);
        }

        // Appuyer sur le bouton envoyer
        await randomSleep(2000, 4000);
        await tap(device, UI_ELEMENTS.sendButton);
        await randomSleep(1000, 4000);

        // Mettre √† jour le statut du contact
        contactedState = 'contacted';

        // D√©lai avant le prochain contact
        await randomSleep(4000, 10000);
        //console.log(`\n‚åõÔ∏è D√©lai avant le prochain contact...`);
    }

    else {
        // Fermer la popup de num√©ro non-enregistr√© sur WhatsApp
        await tap(device, UI_ELEMENTS.preventNotWhatsApp);
        await randomSleep(1000, 4000);

        // Mettre √† jour le statut du contact
        contactedState = 'not_registered';
    }

    return contactedState;
}

// Envoyer une image √† un num√©ro WhatsApp
async function sendImage(device, phone) {

    // Nettoyer le num√©ro du contact
    const phoneNumber = await phoneWaCleaner(phone);

    // Ouvrir le num√©ro dans WhatsApp
    await executeCommand(device, `shell am start -a android.intent.action.VIEW -d "https://wa.me/${phoneNumber}"`);
    await sleep(3000);

    // Envoyer la derni√®re image du r√©pertoire du Sender device √† ce num√©ro
    await tap(device, UI_ELEMENTS.messageInput);
    await sleep(2000);
    await tap(device, UI_ELEMENTS.imageInput);
    await sleep(3000);
    await tap(device, UI_ELEMENTS.galleryMode);
    await sleep(2000);
    await tap(device, UI_ELEMENTS.firstImage);
    await sleep(4000);
    await tap(device, UI_ELEMENTS.sendButton);
    await sleep(5000);

}



// Export du service
export { sendMessage, sendImage };
export const senderService = { sendMessage, sendImage };