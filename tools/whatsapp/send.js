// Workflow d'envoi de messages √† de nouveaux contacts

import { getNewContacts, updateContactStatus } from '../supabase/contacts.js';
import { senderService } from './sender-service.js';
import { randomSleep, sleep } from './helpers.js';
import { deviceService } from './device-service.js';

// Fonction principale du workflow
async function sendWorkflow(campaign, device) {
    try {
        // Service d'envoi WhatsApp

        // √âtape 0 : Initialiter les informations du workflow
        console.log(`‚öôÔ∏è  Initialisation du workflow...`);
        console.log(`‚öôÔ∏è Campagne: ${campaign.name}`);
        console.log(`‚öôÔ∏è Device: ${device}`);
        console.log(`‚öôÔ∏è Message: ${campaign.message}`);
        console.log(`‚öôÔ∏è Query: ${campaign.query}`);
        console.log(`‚öôÔ∏è Count: ${campaign.count}`);
        console.log(`\n`);

        // √âtape 1 : Connexion adb au device (pr√©ventive)
        console.log(`‚öôÔ∏è Connexion adb au device...`);
        await deviceService.connectDevice(device);

        // √âtape 2 : R√©cup√©rer les nouveaux contacts √† traiter
        const contacts = await getNewContacts(campaign.query, campaign.count);
        console.log(`üìû ${contacts.length} nouveaux contacts r√©cup√©r√©s`);

        // √âtape 3 : D√©finir le status de tous ces contacts √† "in_progress"
        for (const contact of contacts) {
            await updateContactStatus(contact.id, 'in_progress', campaign);
        }

        // √âtape 4 : Envoyer les messages √† chaque contact s√©quentiellement
        let count = 0;
        for (const contact of contacts) {   
            try {
                //console.log(`üìû Envoi de message √† ${contact.phone}...`);
                const contactedState = await senderService.sendMessage(device, contact.phone, campaign.message, campaign.id);
                console.log(`üì≤ ${contact.phone} - ${contactedState}`);

                // Mettre √† jour le statut du contact
                await updateContactStatus(contact.id, contactedState, campaign);
                //console.log(`‚úÖ Statut mis √† jour pour ${contact.phone}`);

                count++;
                console.log(`\n‚åõÔ∏è ${count} / ${contacts.length}\n`);

                // D√©lai avant le prochain contact
                await randomSleep(10000, 20000);
                //console.log(`\n‚åõÔ∏è D√©lai avant le prochain contact...`);

            } catch (contactError) {
                console.error(`‚ùå Erreur pour le contact ${contact.phone}:`, contactError.message);
                
                // Mettre √† jour le statut du contact
                await updateContactStatus(contact.id, 'error', campaign);
            }

        }
        
        console.log(`\n‚úÖ Workflow termin√©\n`);
    } catch (error) {
        console.error('‚ùå Erreur dans le workflow:', error.message);
        process.exit(1);
    }
}

// Exporter la fonction principale
export { sendWorkflow };
