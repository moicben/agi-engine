#!/usr/bin/env node

/**
 * Workflow Complet Docker + Android + NordVPN + WhatsApp
 * Script principal pour d√©marrer l'environnement int√©gr√©
 */

import { DockerIntegrationService } from './docker-integration-service.js';
import { sleep } from '../whatsapp/helpers.js';
import EventEmitter from 'events';

class DockerAndroidWorkflow extends EventEmitter {
  constructor() {
    super();
    this.dockerService = new DockerIntegrationService();
    this.isRunning = false;
    this.stats = {
      workflowsStarted: 0,
      workflowsCompleted: 0,
      errors: 0,
      startTime: null,
      activeWorkflows: []
    };
  }

  /**
   * D√©marrage du workflow complet
   */
  async start(options = {}) {
    const {
      countries = ['ca', 'us', 'fr'],
      maxConcurrent = 2,
      workflowDuration = 300000, // 5 minutes par workflow
      autoRestart = false
    } = options;

    console.log('üöÄ D√âMARRAGE WORKFLOW COMPLET DOCKER + ANDROID + NORDVPN + WHATSAPP');
    console.log('================================================================\n');

    await this.initialize();
    this.isRunning = true;
    this.stats.startTime = new Date();

    console.log('üåç Pays configur√©s:', countries.join(', '));
    console.log('‚ö° Workflows concurrents max:', maxConcurrent);
    console.log('‚è±Ô∏è Dur√©e par workflow:', Math.round(workflowDuration / 1000), 'secondes');
    console.log('üîÑ Red√©marrage automatique:', autoRestart ? 'Activ√©' : 'D√©sactiv√©');
    console.log('');

    await this.runWorkflowCycle(countries, maxConcurrent, workflowDuration, autoRestart);
  }

  /**
   * Initialisation de l'environnement
   */
  async initialize() {
    console.log('üîß Initialisation de l\'environnement int√©gr√©...\n');

    try {
      // V√©rifier l'√©tat du container Docker
      console.log('üê≥ V√©rification du container Docker...');
      const containerInfo = await this.dockerService.checkContainerStatus();
      console.log('‚úÖ Container trouv√©:', containerInfo.name);
      console.log('');

      // Initialiser le service d'int√©gration
      console.log('üîó Initialisation du service d\'int√©gration...');
      await this.dockerService.initialize();
      console.log('‚úÖ Service d\'int√©gration initialis√©');
      console.log('');

      // Configurer les gestionnaires d'√©v√©nements
      this.setupEventHandlers();

    } catch (error) {
      console.error('‚ùå Erreur initialisation:', error.message);
      console.error('\nüí° Solutions possibles:');
      console.error('   1. D√©marrer le container: ./start-sync.sh');
      console.error('   2. V√©rifier Docker: docker ps');
      console.error('   3. V√©rifier les logs: docker compose logs');
      throw error;
    }
  }

  /**
   * Configuration des gestionnaires d'√©v√©nements
   */
  setupEventHandlers() {
    // √âv√©nements Docker Integration
    this.dockerService.on('workflow:created', (workflow) => {
      console.log(`üéâ Workflow cr√©√©: ${workflow.name} (${workflow.country})`);
      this.stats.workflowsStarted++;
      this.stats.activeWorkflows.push(workflow);
    });

    // √âv√©nements Android Studio (si disponible)
    if (this.dockerService.androidStudioService) {
      this.dockerService.androidStudioService.on('emulator:created', (data) => {
        console.log(`üì± √âmulateur cr√©√©: ${data.emulator.name}`);
      });

      this.dockerService.androidStudioService.monitor?.on('alert:high_memory', (alert) => {
        console.log(`üö® M√©moire √©lev√©e: ${alert.value}%`);
      });
    }

    // √âv√©nements NordVPN (si disponible)
    if (this.dockerService.nordVPNService) {
      this.dockerService.nordVPNService.monitor?.on('alert:disconnected', () => {
        console.log('üî¥ NordVPN d√©connect√© - Reconexion...');
      });
    }
  }

  /**
   * Cycle principal des workflows
   */
  async runWorkflowCycle(countries, maxConcurrent, workflowDuration, autoRestart) {
    let countryIndex = 0;
    let runningWorkflows = 0;

    while (this.isRunning) {
      try {
        // Attendre si on a atteint le maximum concurrent
        while (runningWorkflows >= maxConcurrent && this.isRunning) {
          await sleep(5000);
          // Nettoyer les workflows termin√©s
          this.cleanupCompletedWorkflows();
        }

        if (!this.isRunning) break;

        const country = countries[countryIndex % countries.length];
        const timestamp = Date.now();
        const workflowName = `docker-whatsapp-${country}-${timestamp}`;

        console.log(`\nüîÑ [Cycle ${this.stats.workflowsStarted + 1}] Cr√©ation workflow: ${workflowName} (${country.toUpperCase()})`);

        // Cr√©er le workflow en arri√®re-plan
        const workflowPromise = this.createWorkflow(workflowName, country, workflowDuration);
        runningWorkflows++;

        // G√©rer le workflow (sans bloquer les autres)
        workflowPromise
          .then(() => {
            runningWorkflows--;
            this.stats.workflowsCompleted++;
            console.log(`‚úÖ Workflow termin√©: ${workflowName}`);
          })
          .catch((error) => {
            runningWorkflows--;
            this.stats.errors++;
            console.error(`‚ùå Workflow √©chou√© ${workflowName}:`, error.message);
          });

        countryIndex++;

        // Petite pause entre les cr√©ations
        await sleep(2000);

        // Afficher les statistiques toutes les 10 workflows
        if (this.stats.workflowsStarted % 10 === 0) {
          this.displayStats();
        }

        // Limiter le nombre total de workflows pour la d√©monstration
        if (this.stats.workflowsStarted >= 50 && !autoRestart) {
          console.log('\nüéØ Limite de 50 workflows atteinte pour la d√©monstration');
          break;
        }

      } catch (error) {
        console.error('‚ùå Erreur cycle principal:', error.message);
        this.stats.errors++;
        await sleep(10000); // Pause plus longue en cas d'erreur
      }
    }

    // Attendre que tous les workflows se terminent
    console.log('\n‚è≥ Attente de la fin de tous les workflows...');
    while (runningWorkflows > 0) {
      await sleep(5000);
      this.cleanupCompletedWorkflows();
    }

    // G√©n√©rer le rapport final
    await this.generateFinalReport();
  }

  /**
   * Cr√©er un workflow individuel
   */
  async createWorkflow(workflowName, country, duration) {
    try {
      console.log(`üöÄ D√©marrage workflow: ${workflowName}`);

      // Cr√©er le workflow complet
      const workflow = await this.dockerService.createDockerWhatsAppWorkflow({
        emulatorName: workflowName,
        country: country,
        useNordVPN: true,
        installWhatsApp: true,
        configureDevice: true
      });

      // Simuler l'activit√© WhatsApp
      await this.simulateWhatsAppActivity(workflow, duration);

      // Nettoyer le workflow
      await this.cleanupWorkflow(workflow);

      return workflow;

    } catch (error) {
      console.error(`‚ùå Erreur workflow ${workflowName}:`, error.message);
      throw error;
    }
  }

  /**
   * Simuler l'activit√© WhatsApp
   */
  async simulateWhatsAppActivity(workflow, duration) {
    const activities = [
      'Connexion WhatsApp',
      'V√©rification SMS',
      'Configuration profil',
      'Synchronisation contacts',
      'Test envoi message',
      'Test appel vocal',
      'Test statut',
      'Test stories'
    ];

    const startTime = Date.now();
    let activityIndex = 0;

    console.log(`üì± Simulation activit√© WhatsApp sur ${workflow.name}...`);

    while (Date.now() - startTime < duration && this.isRunning) {
      const activity = activities[activityIndex % activities.length];
      console.log(`   ${activityIndex + 1}. ${activity}...`);

      // Simuler le temps d'activit√© (5-15 secondes)
      const activityTime = 5000 + Math.random() * 10000;
      await sleep(activityTime);

      // V√©rifier que le workflow est toujours actif
      const currentWorkflow = this.stats.activeWorkflows.find(w => w.id === workflow.id);
      if (!currentWorkflow || currentWorkflow.status !== 'ready') {
        console.log(`‚ö†Ô∏è Workflow ${workflow.name} plus actif`);
        break;
      }

      activityIndex++;
    }

    console.log(`‚úÖ Simulation termin√©e pour ${workflow.name} (${activityIndex} activit√©s)`);
  }

  /**
   * Nettoyer un workflow
   */
  async cleanupWorkflow(workflow) {
    try {
      console.log(`üßπ Nettoyage workflow: ${workflow.name}`);

      // Arr√™ter l'√©mulateur
      await this.dockerService.stopDockerEmulator(workflow.emulator.id);

      // Mettre √† jour le statut
      workflow.status = 'completed';
      workflow.completedAt = new Date();

      // Retirer de la liste active
      const index = this.stats.activeWorkflows.findIndex(w => w.id === workflow.id);
      if (index !== -1) {
        this.stats.activeWorkflows.splice(index, 1);
      }

      console.log(`‚úÖ Workflow nettoy√©: ${workflow.name}`);

    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur nettoyage workflow ${workflow.name}:`, error.message);
    }
  }

  /**
   * Nettoyer les workflows termin√©s
   */
  cleanupCompletedWorkflows() {
    this.stats.activeWorkflows = this.stats.activeWorkflows.filter(workflow =>
      workflow.status === 'ready'
    );
  }

  /**
   * Afficher les statistiques
   */
  displayStats() {
    const uptime = this.stats.startTime ? Date.now() - this.stats.startTime.getTime() : 0;
    const uptimeMinutes = Math.round(uptime / (1000 * 60) * 100) / 100;

    console.log('\nüìä STATISTIQUES ACTUELLES');
    console.log('==========================');
    console.log(`   ‚Ä¢ Workflows d√©marr√©s: ${this.stats.workflowsStarted}`);
    console.log(`   ‚Ä¢ Workflows termin√©s: ${this.stats.workflowsCompleted}`);
    console.log(`   ‚Ä¢ Workflows actifs: ${this.stats.activeWorkflows.length}`);
    console.log(`   ‚Ä¢ Erreurs: ${this.stats.errors}`);
    console.log(`   ‚Ä¢ Uptime: ${uptimeMinutes} minutes`);

    if (this.stats.workflowsStarted > 0) {
      const successRate = Math.round((this.stats.workflowsCompleted / this.stats.workflowsStarted) * 100);
      console.log(`   ‚Ä¢ Taux de succ√®s: ${successRate}%`);
    }

    // Statistiques Docker
    if (this.dockerService.containerInfo) {
      console.log(`   ‚Ä¢ Container: ${this.dockerService.containerInfo.name}`);
      console.log(`   ‚Ä¢ Status: ${this.dockerService.containerInfo.status}`);
    }

    // Workflows actifs actuels
    if (this.stats.activeWorkflows.length > 0) {
      console.log('   ‚Ä¢ Workflows actifs:');
      this.stats.activeWorkflows.slice(0, 3).forEach((workflow, i) => {
        const duration = workflow.createdAt ? Date.now() - workflow.createdAt.getTime() : 0;
        const durationMinutes = Math.round(duration / (1000 * 60) * 100) / 100;
        console.log(`     ${i + 1}. ${workflow.name} (${workflow.country}) - ${durationMinutes}min`);
      });

      if (this.stats.activeWorkflows.length > 3) {
        console.log(`     ... et ${this.stats.activeWorkflows.length - 3} autres`);
      }
    }

    console.log('');
  }

  /**
   * G√©n√©rer le rapport final
   */
  async generateFinalReport() {
    console.log('\nüìã RAPPORT FINAL - DOCKER + ANDROID + NORDVPN + WHATSAPP');
    console.log('==========================================================');

    // Statistiques finales
    this.displayStats();

    // Rapport Docker
    console.log('\nüê≥ √âTAT DOCKER:');
    try {
      const dockerStats = await this.dockerService.getDockerStats();
      if (dockerStats) {
        console.log(`   ‚Ä¢ Container: ${dockerStats.container?.name || 'N/A'}`);
        console.log(`   ‚Ä¢ Workflows totaux: ${dockerStats.workflows?.total || 0}`);
        console.log(`   ‚Ä¢ Services Android: ${dockerStats.services?.androidStudio ? '‚úÖ' : '‚ùå'}`);
        console.log(`   ‚Ä¢ Services NordVPN: ${dockerStats.services?.nordVPN ? '‚úÖ' : '‚ùå'}`);

        if (dockerStats.android) {
          console.log(`   ‚Ä¢ √âmulateurs Docker: ${dockerStats.android.avds?.length || 0}`);
          console.log(`   ‚Ä¢ Devices connect√©s: ${dockerStats.android.devices?.length || 0}`);
        }
      }
    } catch (error) {
      console.log('   ‚Ä¢ Erreur r√©cup√©ration stats Docker');
    }

    // R√©sum√© des performances
    console.log('\n‚ö° R√âSUM√â PERFORMANCES:');
    const totalWorkflows = this.stats.workflowsStarted;
    const successfulWorkflows = this.stats.workflowsCompleted;
    const failedWorkflows = this.stats.errors;

    console.log(`   ‚Ä¢ Total workflows: ${totalWorkflows}`);
    console.log(`   ‚Ä¢ R√©ussis: ${successfulWorkflows}`);
    console.log(`   ‚Ä¢ √âchou√©s: ${failedWorkflows}`);

    if (totalWorkflows > 0) {
      const successRate = Math.round((successfulWorkflows / totalWorkflows) * 100);
      const failureRate = Math.round((failedWorkflows / totalWorkflows) * 100);
      console.log(`   ‚Ä¢ Taux de succ√®s: ${successRate}%`);
      console.log(`   ‚Ä¢ Taux d'√©chec: ${failureRate}%`);
    }

    // Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    if (this.stats.errors > 0) {
      console.log('   ‚Ä¢ Analyser les logs pour identifier les causes d\'√©chec');
      console.log('   ‚Ä¢ V√©rifier la stabilit√© du container Docker');
      console.log('   ‚Ä¢ Optimiser les param√®tres d\'√©mulateur');
    }

    if (successfulWorkflows > 0) {
      console.log('   ‚Ä¢ Configuration optimale trouv√©e');
      console.log('   ‚Ä¢ Process automatis√© fonctionnel');
      console.log('   ‚Ä¢ Scalabilit√© possible');
    }

    console.log('\nüéØ OBJECTIF ATTEINT: Syst√®me d\'automatisation WhatsApp int√©gr√© fonctionnel!');
    console.log('   ‚úÖ Docker + Android + NordVPN + WhatsApp coupl√©s');
    console.log('   ‚úÖ Workflows automatis√©s et monitor√©s');
    console.log('   ‚úÖ Gestion d\'erreurs robuste');
    console.log('   ‚úÖ Statistiques et rapports d√©taill√©s');

    // Sauvegarder les statistiques
    await this.saveStatsReport();
  }

  /**
   * Sauvegarder le rapport de statistiques
   */
  async saveStatsReport() {
    try {
      const report = {
        timestamp: new Date().toISOString(),
        stats: this.stats,
        dockerInfo: this.dockerService.containerInfo,
        workflows: this.stats.activeWorkflows.map(w => ({
          id: w.id,
          name: w.name,
          country: w.country,
          status: w.status,
          createdAt: w.createdAt,
          completedAt: w.completedAt
        }))
      };

      // Utiliser import dynamique pour fs
      const { writeFileSync } = await import('fs');
      const reportPath = `./logs/docker-workflow-report-${Date.now()}.json`;
      writeFileSync(reportPath, JSON.stringify(report, null, 2));
      console.log(`\nüìÑ Rapport sauvegard√©: ${reportPath}`);

    } catch (error) {
      console.log('‚ö†Ô∏è Erreur sauvegarde rapport:', error.message);
    }
  }

  /**
   * Arr√™t propre du workflow
   */
  async stop() {
    console.log('\n‚èπÔ∏è ARR√äT DU WORKFLOW...\n');
    this.isRunning = false;

    // Arr√™ter tous les workflows actifs
    console.log('üîÑ Arr√™t de tous les workflows actifs...');
    const stopPromises = this.stats.activeWorkflows.map(workflow =>
      this.cleanupWorkflow(workflow).catch(error =>
        console.log(`‚ö†Ô∏è Erreur arr√™t workflow ${workflow.name}:`, error.message)
      )
    );

    await Promise.allSettled(stopPromises);

    // Nettoyer l'environnement Docker
    console.log('üßπ Nettoyage de l\'environnement Docker...');
    await this.dockerService.cleanup();

    // G√©n√©rer le rapport final
    await this.generateFinalReport();

    console.log('‚úÖ Workflow arr√™t√© proprement');
  }
}

// Gestion des signaux d'arr√™t
process.on('SIGINT', async () => {
  console.log('\nüõë Signal d\'arr√™t re√ßu...');
  const workflow = global.dockerWorkflow;
  if (workflow) {
    await workflow.stop();
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Signal de terminaison re√ßu...');
  const workflow = global.dockerWorkflow;
  if (workflow) {
    await workflow.stop();
  }
  process.exit(0);
});

// Fonction principale
async function main() {
  const workflow = new DockerAndroidWorkflow();
  global.dockerWorkflow = workflow;

  try {
    // Options de configuration
    const options = {
      countries: process.env.WORKFLOW_COUNTRIES ? process.env.WORKFLOW_COUNTRIES.split(',') : ['ca', 'us', 'fr'],
      maxConcurrent: parseInt(process.env.MAX_CONCURRENT_WORKFLOWS) || 2,
      workflowDuration: parseInt(process.env.WORKFLOW_DURATION) || 300000,
      autoRestart: process.env.AUTO_RESTART === 'true'
    };

    console.log('üîß Options de configuration:');
    console.log('   ‚Ä¢ Pays:', options.countries.join(', '));
    console.log('   ‚Ä¢ Concurrent max:', options.maxConcurrent);
    console.log('   ‚Ä¢ Dur√©e workflow:', Math.round(options.workflowDuration / 1000), 'secondes');
    console.log('   ‚Ä¢ Auto-red√©marrage:', options.autoRestart);
    console.log('');

    await workflow.start(options);

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error.message);
    await workflow.stop();
    process.exit(1);
  }
}

// Lancer si ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { DockerAndroidWorkflow };
export default DockerAndroidWorkflow;
