// Workflow de liaison d'un device WhatsApp

const { getWhatsAppService } = require('../../services/whatsapp/app-service');
const config = require('../../config');
const { randomSleep, sleep } = require('../../utils/helpers');
const { connectDevice, executeCommand, takeScreenshot } = require('../../utils/adb');

// Fonction principale du workflow
async function linkDeviceWorkflow(device) {
    try {
        const whatsappService = getWhatsAppService();

        console.log(`‚öôÔ∏è  Initialisation du workflow link-device...`);
        console.log(`üì± Device: ${device}`);

        // √âtape 1 : Connexion adb au device
        console.log(`‚öôÔ∏è Connexion adb au device...`);
        await connectDevice(device);

        // √âtape 2 : Ouvrir WhatsApp
        console.log(`üì± Ouverture de WhatsApp...`);
        await whatsappService.openWhatsApp(device);
        await sleep(3000);

        // √âtape 3 : Aller dans les param√®tres
        console.log(`‚öôÔ∏è Acc√®s aux param√®tres...`);
        await whatsappService.openSettings(device);
        await sleep(2000);

        // √âtape 4 : Acc√©der √† "Appareils li√©s"
        console.log(`üîó Acc√®s aux appareils li√©s...`);
        await whatsappService.openLinkedDevices(device);
        await sleep(2000);

        // √âtape 5 : Ajouter un nouvel appareil
        console.log(`‚ûï Ajout d'un nouvel appareil...`);
        await whatsappService.addNewDevice(device);
        await sleep(3000);

        // √âtape 6 : Capturer le QR code
        console.log(`üì∑ Capture du QR code...`);
        const qrScreenshot = `qr-${Date.now()}.png`;
        await takeScreenshot(device, qrScreenshot);
        console.log(`üì∏ QR code captur√©: ${qrScreenshot}`);

        // √âtape 7 : Attendre la liaison (timeout de 60 secondes)
        console.log(`‚è≥ Attente de la liaison de l'appareil...`);
        let linked = false;
        let attempts = 0;
        const maxAttempts = 12; // 60 secondes / 5 secondes

        while (!linked && attempts < maxAttempts) {
            await sleep(5000);
            attempts++;
            
            // V√©rifier si la liaison est effectu√©e
            const currentScreen = `link-check-${Date.now()}.png`;
            await takeScreenshot(device, currentScreen);
            
            // Ici vous pourriez ajouter une logique OCR pour v√©rifier si la liaison est r√©ussie
            console.log(`‚è≥ Tentative ${attempts}/${maxAttempts}...`);
        }

        if (attempts >= maxAttempts) {
            console.log(`‚ö†Ô∏è Timeout: liaison non d√©tect√©e apr√®s ${maxAttempts * 5} secondes`);
        } else {
            console.log(`‚úÖ Appareil li√© avec succ√®s`);
            linked = true;
        }

        console.log(`\n‚úÖ Workflow link-device termin√©\n`);
        return { success: linked, qrScreenshot };

    } catch (error) {
        console.error('‚ùå Erreur dans le workflow link-device:', error.message);
        throw error;
    }
}

// Exporter la fonction principale
module.exports = { linkDeviceWorkflow };